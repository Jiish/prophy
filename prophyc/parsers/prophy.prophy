
const min = 123;
const avg = 0777;
const max = 0x666;

typedef u32 int3_t;
typedef u32 int2_t;

typedef u32 struct_t;
typedef u32 const_t;
typedef u32 union_t;
typedef u32 enum_t;
typedef u32 u8_t;
typedef u32 u16_t;
typedef u32 u64_t;
typedef u32 bytes_t;
typedef u32 float_t;
typedef u32 double_t;

enum enum_t
{
    enum_t_1 = 1, // first enum value
    enum_t_2 = 2 // second enum value
};

// nonsense
//// more nonsense // yet some more

struct Commented
{
/// u8 one;
  //u8 two;
  /*u8 three;
    u8 four;
    u8 six;*/
    u8 seven; /// The only one not commented
/*  u8 eight; commented out */
};

struct Test
{
    u32* val;
    i32 true;
    double* optval;
    objects a[3];
    objects b<5>;
    objects c<>;
    bytes d[3];
    bytes e<5>;
    bytes f<>;
};

struct Test
{
    u32* val;
    i32 true;
    double* optval;
    objects a[3];
    objects b<5>;
    objects c<>;
    bytes d[3];
    bytes e<5>;
    bytes f<>;
};

union Yatest
{
    1: u32 val;
    2: u32 dupcia; /// okaskoakss
    max: test next;
};

struct Object
{
    u32 dataset_id;
    bytes uri<>;
    i64 values<>;
    u32 average_weights<>;
    bytes updated_counters<>;
};

struct ValuesResp
{
    u32 transaction_id;
    u64 timestamp;
    u32 last;
    Object objects<>;
};
